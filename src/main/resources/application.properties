# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
spring.datasource.url = jdbc:mysql://koakh.com:3306/springboot_vaadin_account_manager
spring.datasource.username = ${DB_USERNAME}
spring.datasource.password = ${DB_PASSWORD}

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = false

# Using the hibernate configuration ddl-auto = update the database schema will be automatically created (and updated), 
# creating tables and columns, accordingly to java entities found in the project.

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# Model
model.faker.records.customer = 100
model.faker.records.country = 50
# Model Defaults
model.faker.records.country.default = 200

#Application
app.name = "Account Manager";

# Minimise Spring Boot Startup Time
# http://stackoverflow.com/questions/35709234/minimise-spring-boot-startup-time
# http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html
#debug=true
logging.level.root = WARN
logging.level.org.springframework.web = DEBUG
logging.level.org.hibernate = ERROR
